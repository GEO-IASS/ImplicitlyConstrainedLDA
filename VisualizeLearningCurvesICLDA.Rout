
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]


Attaching package: ‘devtools’

The following object is masked from ‘package:base’:

    system.file


Welcome at Wed May 21 16:00:40 2014 
> library(RSSL)
Loading required package: class
Loading required package: sampling
Loading required package: MASS
Loading required package: e1071
Loading required package: foreign
Loading required package: bootstrap
Loading required package: plyr
Loading required package: Matrix
Loading required package: pls

Attaching package: ‘pls’

The following object is masked from ‘package:bootstrap’:

    crossval

The following object is masked from ‘package:stats’:

    loadings

Loading required package: optimx
Loading required package: numDeriv

Attaching package: ‘RSSL’

The following object is masked _by_ ‘.GlobalEnv’:

    table.CrossValidation

> library(reshape)

Attaching package: ‘reshape’

The following object is masked from ‘package:Matrix’:

    expand

The following objects are masked from ‘package:plyr’:

    rename, round_any

The following object is masked from ‘package:class’:

    condense

> library(ggplot2)
> require(gridExtra)
Loading required package: gridExtra
Loading required package: grid
> 
> load("Results/Learningcurves3sets.RData")
> 
> # Newer version:
> # class(cvb[[1]])<-"ErrorCurve"
> # class(cvb[[2]])<-"ErrorCurve"
> # class(cvb[[3]])<-"ErrorCurve"
> errorcurves[[1]]$results<-(errorcurves[[1]]$results)[,1:10,,]
> errorcurves[[2]]$results<-(errorcurves[[2]]$results)[,1:10,,]
> errorcurves[[3]]$results<-(errorcurves[[3]]$results)[,1:10,,]
> # 
> # plot.ErrorCurve2(cvb,classifier_names=c("LDA","LDAoracle","MCLDA","SLLDA","ICLDA"),dataset_names=names(datasets))
> 
> plots<-list()
> for (n in 1:length(errorcurves)) { 
+   thesecurves<-errorcurves[[n]]
+   # dimnames(thesecurves$results)[[3]]<-c("SL","LS","LSoracle","UCLS","ICLS")
+   if (1) { thesecurves$results<-thesecurves$results[,,,] }
+   dimnames(thesecurves$results)[[3]]<-c("LDA","LDAoracle","MCLDA","SLLDA","ICLDA")
+   class(thesecurves)<-"ErrorCurve"
+   plots<-c(plots,list(plot.ErrorCurve(thesecurves,measurement=1,dataset_names=names(datasets)[[n]],legendsetting="none")))
+   # plots<-c(plots,list(plot.ErrorCurve(errorcurves[[n]],measurement=2,datasetname=names(datasets)[[n]],legendsetting="none")))
+ }
> plots1<-plots
> 
> # for (k in 1:ceiling(length(plots)/5)) {
> #   pl<-createlegend.ErrorCurve(thesecurves,measurement=1,datasetname=names(datasets)[[n]],legendsetting="right")
> #   pdf(paste("~/Dropbox/Results/LearningCurves2-",n_labeled,"-",repeats,"repeats-",k,"-",description,".pdf",sep=""),paper="a4")
> #   gridplot<-do.call(grid.arrange, c(plots[(1+5*(k-1)):min(5*k,length(plots))],list(pl),ncol=2))
> #   dev.off()
> # }
> 
> plots<-list()
> for (n in 1:length(errorcurves)) { 
+   thesecurves<-errorcurves[[n]]
+   # dimnames(thesecurves$results)[[3]]<-c("SL","LS","LSoracle","UCLS","ICLS")
+   if (1) { thesecurves$results<-thesecurves$results[,,,] }
+   dimnames(thesecurves$results)[[3]]<-c("LDA","LDAoracle","MCLDA","SLLDA","ICLDA")
+   class(thesecurves)<-"ErrorCurve"
+   plots<-c(plots,list(plot.ErrorCurve(thesecurves,measurement=2,dataset_names=names(datasets)[[n]],legendsetting="none")))
+   # plots<-c(plots,list(plot.ErrorCurve(errorcurves[[n]],measurement=2,datasetname=names(datasets)[[n]],legendsetting="none")))
+ }
> plots2<-plots
> 
> # for (k in 1:ceiling(length(plots)/5)) {
> #   pl<-createlegend.ErrorCurve(errorcurves[[1]],measurement=2,datasetname=names(datasets)[[n]],legendsetting="right")
> #   pdf(paste("~/Dropbox/Results/LearningCurves-Loss-",n_labeled,"-",repeats,"repeats-",k,"-",description,".pdf",sep=""),paper="a4")
> #   gridplot<-do.call(grid.arrange, c(plots[(1+5*(k-1)):min(5*k,length(plots))],list(pl),ncol=2))
> #   dev.off()
> # }
> 
> 
> pdf(paste("Figures/errorcurves.pdf",sep=""),width=14,height=7)
> 
> # Add legend to last figure
> tc<-errorcurves[[3]]
> class(tc)<-"ErrorCurve"
> dimnames(tc$results)[[3]]<-c("LDA","LDAoracle","MCLDA","SLLDA","ICLDA")
> plots2[3]<-list(plot.ErrorCurve(tc,measurement=2,dataset_names=names(datasets)[[3]],legendsetting="right")+theme(legend.text = element_text(size = 8),legend.justification = c(1, 0), legend.position = c(1.0, 0.2)))
> gridplot<-do.call(grid.arrange, c(plots1,plots2,ncol=3))
Warning messages:
1: Removed 10 rows containing missing values (geom_path). 
2: Removed 10 rows containing missing values (geom_point). 
3: Removed 15 rows containing missing values (geom_path). 
4: Removed 15 rows containing missing values (geom_point). 
5: Removed 10 rows containing missing values (geom_path). 
6: Removed 10 rows containing missing values (geom_point). 
7: Removed 15 rows containing missing values (geom_path). 
8: Removed 15 rows containing missing values (geom_point). 
> dev.off()
null device 
          1 
> 

Goodbye at  Wed May 21 16:00:44 2014 
> proc.time()
   user  system elapsed 
  7.476   0.182   7.724 
